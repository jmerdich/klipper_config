
[stepper_x]
step_pin: PC0
dir_pin: PL1
enable_pin: !PA7
microsteps: 16
rotation_distance: 32
endstop_pin: ^PB6
#endstop_pin: ^PC7
position_endstop: 0
position_max: 250
homing_speed: 35
second_homing_speed: 5

[stepper_y]
step_pin: PC1
dir_pin: PL0
enable_pin: !PA6
microsteps: 16
rotation_distance: 32
endstop_pin: ^PB5
#endstop_pin: ^PA2
position_endstop: 0
position_max: 210
homing_speed: 35
second_homing_speed: 5

[stepper_z]
step_pin: PC2
dir_pin: PL2
enable_pin: !PA5
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
#endstop_pin: ^PB4
#endstop_pin: ^PA1
#position_endstop: 0.5
position_max: 200
homing_speed: 10

[output_pin stepper_xy_current]
pin: PL3
pwm: True
# In Amps
scale: 2.0
# The DAC in the driver works at 30KHz, but there's some serious
# filtering in the minirambo here so we don't need to run at 60KHz+.
# 200Hz (stock prusa) gives a 45db filter, but 3KHz+ gives
# 90db for free. You don't want this in phase with the DAC though,
# so we go with 4KHz. Component error will be more of a factor
# than sampling here anyhow though.
cycle_time: .00025
hardware_pwm: True
# Stock prusa "loud" variant. Motors rated for 1A.
static_value: 0.54

[output_pin stepper_z_current]
pin: PL4
pwm: True
# In Amps
scale: 2.0
# 4KHz, see explanation above
cycle_time: .00025
hardware_pwm: True
# Stock prusa "loud" variant. Motors rated for 1A.
static_value: 0.83

[output_pin stepper_e_current]
pin: PL5
pwm: True
# In Amps
scale: 2.0
# 4KHz, see explanation above
cycle_time: .00025
hardware_pwm: True
# Stock prusa "loud" variant. Motors rated for 1A.
static_value: 0.5

[static_digital_output stepper_config]
# These control the microstep settings on the drivers
# MS1 MS2   Steps
# L   L   = 1
# H   L   = 2
# L   H   = 4
# H   H   = 16
pins:
    PG1, PG0,
    PK7, PG2,
    PK6, PK5,
    PK3, PK4